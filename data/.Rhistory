library(RPostgreSQL)
library(dplyr)
library(tidyr)
library(tseries) # for kpss.test
# Log into the data warehouse
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname = "execdwhdb",
host = "datawarehouse-vpn.execonline.com",
port = 5439,
user = "sysadmin",
password = "aRyydpcrQ2y")
# Load the tables into variables
tables <- dbListTables(con)
# -------------------------------------------------
# Forecasting on monthly enrollment
# -------------------------------------------
# Pull Enrollment Data
enrollment <- dbGetQuery(con, c("SELECT
DATE_PART('month', s.createddate) AS month,
DATE_PART('year', s.createddate) AS year,
SUM(epcs_utilized__c) AS epcs
FROM execprod.stg_sf_students AS s
LEFT JOIN execprod.stg_sf_programs AS p
ON s.program = p.id
WHERE status NOT IN ('Auditor', 'Not Participating', '', 'N/A')
AND account NOT LIKE '%ExecOnline%'
AND LOWER(account) NOT LIKE '%yale%'
AND account NOT IN ('', 'QA - org', 'Columbia Business School', 'Individual Contributor')
AND s.createddate IS NOT NULL
GROUP BY
month,
year
HAVING
year != 2019.0
ORDER BY year, month"))
enrollment <- tbl_df(enrollment)
# Convert to time series object for input into HoltWinters model
enroll_vec <- as.vector(unlist(enrollment[,3])) # Unlist flattens a data frame to convert into a vector
enroll_ts <- ts(enroll_vec, start = 2015, frequency = 12) # ts is time series function
class(temps_ts)
# Plot time series of enrollment
plot.ts(enroll_ts,main = "Timeseries of Enrollment", col = "blue")
abline(reg = lm(enroll_ts~time(enroll_ts)))
enroll_HW <- HoltWinters(enroll_ts,
alpha = NULL,
beta = NULL,
gamma = NULL,
seasonal = "m")
plot(enroll_HW)
pro_enroll <- dbGetQuery(con, c("
SELECT
CASE
WHEN DATE_PART('month', p.course_start_date) = 1 THEN 2
WHEN DATE_PART('month', p.course_start_date) = 3 THEN 2
WHEN DATE_PART('month', p.course_start_date) = 5 THEN 4
WHEN DATE_PART('month', p.course_start_date) = 6 THEN 7
WHEN DATE_PART('month', p.course_start_date) = 8 THEN 9
WHEN DATE_PART('month', p.course_start_date) = 11 THEN 10
WHEN DATE_PART('month', p.course_start_date) = 12 THEN 10
WHEN DATE_PART('year', p.course_start_date) < 2018 AND DATE_PART('month', p.course_start_date) = 9 THEN 10 -- special case for custom september runs, recode to october for years before a september run
ELSE DATE_PART('month', p.course_start_date) END AS month,
--    DATE_PART('month', p.course_start_date) AS month,
DATE_PART('year', p.course_start_date) AS year,
SUM(epcs_utilized__c) AS epcs
FROM execprod.stg_sf_students AS s
LEFT JOIN execprod.stg_sf_programs AS p
ON s.program = p.id
WHERE status NOT IN ('Auditor', 'Not Participating', '', 'N/A')
AND account NOT LIKE '%ExecOnline%'
AND LOWER(account) NOT LIKE '%yale%'
AND account NOT IN ('', 'QA - org', 'Columbia Business School', 'Individual Contributor')
AND s.createddate IS NOT NULL
GROUP BY
month,
year
HAVING
year > 2014.0
AND year IS NOT NULL
ORDER BY year, month"))
pro_enroll <- tbl_df(pro_enroll)
pro_enroll
View(pro_enroll)
pro_enroll <- pro_enroll %>%
filter(year != 2019)
pro_enroll
pro_enroll$index <- paste0(pro_enroll$month, pro_enroll$year)
pro_enroll
years <- as.integer(levels(as.factor(pro_enroll$year)))
for (i in 1:length(years)) {
for (j in 1:12) {
if (!paste0(j, years[i]) %in% pro_enroll$index) {
row <- data.frame("month" = j, "year" = as.double(years[i]), "epcs" =  0)
pro_enroll <- bind_rows(pro_enroll, row)
}
}
}
years
pro_enroll
pro_enroll <- pro_enroll %>%
select(-index) %>%
filter(year < 2019) %>%
arrange(year, month)
pro_enroll
pro_enroll_vec <- as.vector(unlist(pro_enroll[,3]))
pro_enroll_ts <- ts(pro_enroll_vec, start = 2015, frequency = 12) # ts is time series function
pro_enroll_ts
plot.ts(pro_enroll_ts,main = "Timeseries of Enrollment", col = "blue")
abline(reg = lm(pro_enroll_ts~time(pro_enroll_ts)))
pro_enroll_HW <- HoltWinters(pro_enroll_ts,
alpha = NULL,
beta = NULL,
gamma = NULL,
seasonal = "a")
plot(pro_enroll_HW)
p <- predict(pro_enroll_HW, 12, prediction.interval = FALSE)
plot(pro_enroll_HW, p)
forecast_pro_enroll <- forecast(pro_enroll_HW, h=12)
forecast_pro_enroll
rm(list = ls())
1018.6 - 826.25
192.34 - 34.10
192.34 - 28.9
1018.6 - 826.25
100 - 28.9
125 * .2
rm(list = ls())
pro_enroll <- dbGetQuery(con, c("
SELECT
CASE
WHEN DATE_PART('month', p.course_start_date) = 1 THEN 2
WHEN DATE_PART('month', p.course_start_date) = 3 THEN 2
WHEN DATE_PART('month', p.course_start_date) = 5 THEN 4
WHEN DATE_PART('month', p.course_start_date) = 6 THEN 7
WHEN DATE_PART('month', p.course_start_date) = 8 THEN 9
WHEN DATE_PART('month', p.course_start_date) = 11 THEN 10
WHEN DATE_PART('month', p.course_start_date) = 12 THEN 10
WHEN DATE_PART('year', p.course_start_date) < 2018 AND DATE_PART('month', p.course_start_date) = 9 THEN 10 -- special case for custom september runs, recode to october for years before a september run
ELSE DATE_PART('month', p.course_start_date) END AS month,
--    DATE_PART('month', p.course_start_date) AS month,
DATE_PART('year', p.course_start_date) AS year,
SUM(epcs_utilized__c) AS epcs
FROM execprod.stg_sf_students AS s
LEFT JOIN execprod.stg_sf_programs AS p
ON s.program = p.id
WHERE status NOT IN ('Auditor', 'Not Participating', '', 'N/A')
AND account NOT LIKE '%ExecOnline%'
AND LOWER(account) NOT LIKE '%yale%'
AND account NOT IN ('', 'QA - org', 'Columbia Business School', 'Individual Contributor')
AND s.createddate IS NOT NULL
GROUP BY
month,
year
HAVING
year > 2014.0
AND year IS NOT NULL
ORDER BY year, month"))
pro_enroll <- tbl_df(pro_enroll)
pro_enroll <- dbGetQuery(con, c("
SELECT
CASE
WHEN DATE_PART('month', p.course_start_date) = 1 THEN 2
WHEN DATE_PART('month', p.course_start_date) = 3 THEN 2
WHEN DATE_PART('month', p.course_start_date) = 5 THEN 4
WHEN DATE_PART('month', p.course_start_date) = 6 THEN 7
WHEN DATE_PART('month', p.course_start_date) = 8 THEN 9
WHEN DATE_PART('month', p.course_start_date) = 11 THEN 10
WHEN DATE_PART('month', p.course_start_date) = 12 THEN 10
WHEN DATE_PART('year', p.course_start_date) < 2018 AND DATE_PART('month', p.course_start_date) = 9 THEN 10 -- special case for custom september runs, recode to october for years before a september run
ELSE DATE_PART('month', p.course_start_date) END AS month,
--    DATE_PART('month', p.course_start_date) AS month,
DATE_PART('year', p.course_start_date) AS year,
SUM(epcs_utilized__c) AS epcs
FROM execprod.stg_sf_students AS s
LEFT JOIN execprod.stg_sf_programs AS p
ON s.program = p.id
WHERE status NOT IN ('Auditor', 'Not Participating', '', 'N/A')
AND account NOT LIKE '%ExecOnline%'
AND LOWER(account) NOT LIKE '%yale%'
AND account NOT IN ('', 'QA - org', 'Columbia Business School', 'Individual Contributor')
AND s.createddate IS NOT NULL
GROUP BY
month,
year
HAVING
year > 2014.0
AND year IS NOT NULL
ORDER BY year, month"))
# Load libraries
library(RPostgreSQL)
library(dplyr)
library(tidyr)
library(tseries) # for kpss.test
# Log into the data warehouse
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname = "execdwhdb",
host = "datawarehouse-vpn.execonline.com",
port = 5439,
user = "sysadmin",
password = "aRyydpcrQ2y")
# Load the tables into variables
tables <- dbListTables(con)
pro_enroll <- dbGetQuery(con, c("
SELECT
CASE
WHEN DATE_PART('month', p.course_start_date) = 1 THEN 2
WHEN DATE_PART('month', p.course_start_date) = 3 THEN 2
WHEN DATE_PART('month', p.course_start_date) = 5 THEN 4
WHEN DATE_PART('month', p.course_start_date) = 6 THEN 7
WHEN DATE_PART('month', p.course_start_date) = 8 THEN 9
WHEN DATE_PART('month', p.course_start_date) = 11 THEN 10
WHEN DATE_PART('month', p.course_start_date) = 12 THEN 10
WHEN DATE_PART('year', p.course_start_date) < 2018 AND DATE_PART('month', p.course_start_date) = 9 THEN 10 -- special case for custom september runs, recode to october for years before a september run
ELSE DATE_PART('month', p.course_start_date) END AS month,
--    DATE_PART('month', p.course_start_date) AS month,
DATE_PART('year', p.course_start_date) AS year,
SUM(epcs_utilized__c) AS epcs
FROM execprod.stg_sf_students AS s
LEFT JOIN execprod.stg_sf_programs AS p
ON s.program = p.id
WHERE status NOT IN ('Auditor', 'Not Participating', '', 'N/A')
AND account NOT LIKE '%ExecOnline%'
AND LOWER(account) NOT LIKE '%yale%'
AND account NOT IN ('', 'QA - org', 'Columbia Business School', 'Individual Contributor')
AND s.createddate IS NOT NULL
GROUP BY
month,
year
HAVING
year > 2014.0
AND year IS NOT NULL
ORDER BY year, month"))
pro_enroll <- tbl_df(pro_enroll)
pro_enroll
rm(list = ls())
library(RPostgreSQL)
library(dplyr)
library(tidyr)
library(tseries) # for kpss.test
# Log into the data warehouse
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv,
dbname = "execdwhdb",
host = "datawarehouse-vpn.execonline.com",
port = 5439,
user = "sysadmin",
password = "aRyydpcrQ2y")
# Load the tables into variables
tables <- dbListTables(con)
bookings <- dbGetQuery(con, c("
SELECT
--type,
--closedate,
DATEPART('year', closedate) AS year,
DATEPART('month', closedate) AS month,
SUM(amount) AS bookings
FROM execprod.stg_sf_opportunity AS o
WHERE
stagename = 'Closed/Won'
AND amount > 1.0
GROUP BY
year,
month"))
bookings <- tbl_df(bookings)
bookings <- bookings %>%
filter(year != 2019)
bookings$index <- paste0(bookings$month, bookings$year)
years <- as.integer(levels(as.factor(bookings$year)))
years
bookings
for (i in 1:length(years)) {
for (j in 1:12) {
if (!paste0(j, years[i]) %in% bookings$index) {
row <- data.frame("month" = j, "year" = as.double(years[i]), "bookings" =  0)
bookings <- bind_rows(bookings, row)
}
}
}
bookings
View(bookings)
bookings <- bookings %>%
select(-index) %>%
filter(year < 2019) %>%
arrange(year, month)
bookings
bookings_vec <- as.vector(unlist(bookings[,3])) # Unlist flattens a data frame to convert into a vector
bookings_ts <- ts(bookings_vec, start = 2013, frequency = 12) # ts is time series function
bookings_ts
plot.ts(bookings_ts,main = "Timeseries of Bookings", col = "blue")
abline(reg = lm(bookings_ts~time(bookings_ts)))
bookings_HW <- HoltWinters(bookings_ts,
alpha = NULL,
beta = NULL,
gamma = NULL,
seasonal = "a")
plot(bookings_HW)
b <- predict(bookings_HW, 12, prediction.interval = FALSE)
plot(bookings_HW, b)
forecast_bookings <- forecast(bookings_HW, h=12)
library(forecast)
forecast_bookings <- forecast(bookings_HW, h=12)
forecast_bookings
bookings <- dbGetQuery(con, c("
SELECT
--type,
--closedate,
DATEPART('year', closedate) AS year,
DATEPART('month', closedate) AS month,
SUM(amount) AS bookings
FROM execprod.stg_sf_opportunity AS o
WHERE
stagename = 'Closed/Won'
AND amount > 1.0
GROUP BY
year,
month"))
all_bookings <- tbl_df(all_bookings)
bookings_2019 <- all_bookings %>%
filter(year == 2019)
all_bookings <- dbGetQuery(con, c("
SELECT
--type,
--closedate,
DATEPART('year', closedate) AS year,
DATEPART('month', closedate) AS month,
SUM(amount) AS bookings
FROM execprod.stg_sf_opportunity AS o
WHERE
stagename = 'Closed/Won'
AND amount > 1.0
GROUP BY
year,
month"))
all_bookings <- tbl_df(all_bookings)
bookings_2019 <- all_bookings %>%
filter(year == 2019)
bookings_2019
forecast_bookings
bookings_2019 <- all_bookings %>%
filter(year == 2019) %>%
arrange(month, year)
bookings_2019
bookings_HW
bookings_HW <- HoltWinters(bookings_ts,
alpha = NULL,
beta = 0.5,
gamma = NULL,
seasonal = "a")
plot(bookings_HW)
b <- predict(bookings_HW, 12, prediction.interval = FALSE)
plot(bookings_HW, b)
bookings_HW <- HoltWinters(bookings_ts,
alpha = NULL,
beta = NULL,
gamma = NULL,
seasonal = "m")
bookings_HW <- HoltWinters(bookings_ts,
alpha = NULL,
beta = NULL,
gamma = 0.5,
seasonal = "a")
b <- predict(bookings_HW, 12, prediction.interval = FALSE)
plot(bookings_HW, b)
bookings_HW <- HoltWinters(bookings_ts,
alpha = NULL,
beta = NULL,
gamma = 0.1,
seasonal = "a")
b <- predict(bookings_HW, 12, prediction.interval = FALSE)
plot(bookings_HW, b)
bookings_HW <- HoltWinters(bookings_ts,
alpha = NULL,
beta = NULL,
gamma = 0.9,
seasonal = "a")
b <- predict(bookings_HW, 12, prediction.interval = FALSE)
plot(bookings_HW, b)
bookings_ts
bookings
bookings %>% filter(year == 2018) %>% sum(bookings)
table(bookings$year, bookings$amount)
table(bookings$year)
bookings %>% filter(year == 2018) %>% sum(bookings)
bookings_ts
test <- bookings %>% filter(year == 2018)
test
nrow(test)
sum(test$bookings)
bookings <- all_bookings %>%
filter(year != 2019) %>%
filter(year != 2013)
bookings$index <- paste0(bookings$month, bookings$year)
years <- as.integer(levels(as.factor(bookings$year)))
for (i in 1:length(years)) {
for (j in 1:12) {
if (!paste0(j, years[i]) %in% bookings$index) {
row <- data.frame("month" = j, "year" = as.double(years[i]), "bookings" =  0)
bookings <- bind_rows(bookings, row)
}
}
}
# Remove index column
bookings <- bookings %>%
select(-index) %>%
filter(year < 2019) %>%
arrange(year, month)
# Convert to time series object for input into HoltWinters model
bookings_vec <- as.vector(unlist(bookings[,3])) # Unlist flattens a data frame to convert into a vector
bookings_ts <- ts(bookings_vec, start = 2013, frequency = 12) # ts is time series function
bookings_ts
# Plot time series of enrollment
plot.ts(bookings_ts,main = "Timeseries of Bookings", col = "blue")
abline(reg = lm(bookings_ts~time(bookings_ts)))
bookings
bookings$index <- paste0(bookings$month, bookings$year)
years <- as.integer(levels(as.factor(bookings$year)))
for (i in 1:length(years)) {
for (j in 1:12) {
if (!paste0(j, years[i]) %in% bookings$index) {
row <- data.frame("month" = j, "year" = as.double(years[i]), "bookings" =  0)
bookings <- bind_rows(bookings, row)
}
}
}
# Remove index column
bookings <- bookings %>%
select(-index) %>%
filter(year < 2019) %>%
arrange(year, month)
# Convert to time series object for input into HoltWinters model
bookings_vec <- as.vector(unlist(bookings[,3])) # Unlist flattens a data frame to convert into a vector
bookings_ts <- ts(bookings_vec, start = 2013, frequency = 12) # ts is time series function
bookings_ts
bookings_vec <- as.vector(unlist(bookings[,3])) # Unlist flattens a data frame to convert into a vector
bookings_ts <- ts(bookings_vec, start = 2014, frequency = 12) # ts is time series function
bookings_ts
bookings <- bookings %>%
select(-index) %>%
filter(year < 2019) %>%
filter(year > 2014) %>%
arrange(year, month)
# Convert to time series object for input into HoltWinters model
bookings_vec <- as.vector(unlist(bookings[,3])) # Unlist flattens a data frame to convert into a vector
bookings_ts <- ts(bookings_vec, start = 2015, frequency = 12) # ts is time series function
bookings_ts
# Plot time series of enrollment
plot.ts(bookings_ts,main = "Timeseries of Bookings", col = "blue")
abline(reg = lm(bookings_ts~time(bookings_ts)))
bookings_HW <- HoltWinters(bookings_ts,
alpha = NULL,
beta = NULL,
gamma = NULL,
seasonal = "m")
plot(bookings_HW)
bookings_ts
bookings
bookings <- bookings %>%
select(-index) %>%
filter(year < 2019) %>%
filter(year > 2014) %>%
arrange(year, month)
bookings <- all_bookings %>%
filter(year != 2019)
# In this section i'm going to populate the empty months with a year and month value, as well as a value of 0 for epcs if there was no course
# Store years
# Create index for conditional check
bookings$index <- paste0(bookings$month, bookings$year)
years <- as.integer(levels(as.factor(bookings$year)))
for (i in 1:length(years)) {
for (j in 1:12) {
if (!paste0(j, years[i]) %in% bookings$index) {
row <- data.frame("month" = j, "year" = as.double(years[i]), "bookings" =  0)
bookings <- bind_rows(bookings, row)
}
}
}
# Remove index column
bookings <- bookings %>%
select(-index) %>%
filter(year < 2019) %>%
filter(year > 2014) %>%
arrange(year, month)
bookings
bookings_vec <- as.vector(unlist(bookings[,3])) # Unlist flattens a data frame to convert into a vector
bookings_ts <- ts(bookings_vec, start = 2015, frequency = 12) # ts is time series function
bookings_ts
bookings_HW <- HoltWinters(bookings_ts,
alpha = NULL,
beta = NULL,
gamma = NULL,
seasonal = "m")
plot(bookings_HW)
b <- predict(bookings_HW, 12, prediction.interval = FALSE)
plot(bookings_HW, b)
forecast_bookings <- forecast(bookings_HW, h=12)
forecast_bookings
bookings_2019
bookings_HW
bookings_HW
forecast_bookings
bookings_2019
forecast_bookings$upper
forecast_bookings$x
forecast_bookings$fitted
forecast_bookings[0]
947161.2 + 758143.2 + 8522904.4 + 1069159.3 + 2351163.5 + 20462824.8 + 1055578.5 + 3593519.6 + 11597952.4 + 1543601.3 + 11659386.1 + 42575265.5
42575265.5 / 106136660
test <- all_bookings %>% filter(year == 2018)
test_2018 <- test %>% filter(month == 12)
sum(test_2018$bookings) / sum(test$bookings)
sum(test$bookings)
